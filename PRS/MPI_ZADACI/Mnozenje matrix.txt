#include <stdio.h>
#include <stdlib.h>
#include "mpi.h"

#define n 4
#define m 3
#define k 5

int main(int argc, char* argv[]) {
    MPI_Init(&argc, &argv);
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    int A[n][m], B[m][k];
    int my_col[n], my_row[k];
    MPI_Datatype COL_TYPE;
    MPI_Datatype RESIZED_COL_TYPE;
    MPI_Type_vector(n, 1, m, MPI_INT, &COL_TYPE);
    MPI_Type_create_resized(COL_TYPE, 0, 1 * sizeof(int), &RESIZED_COL_TYPE);
    MPI_Type_commit(&RESIZED_COL_TYPE);
    if (rank == 0) {
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                A[i][j] = rand() % 10;
        for (int i = 0; i < m; i++)
            for (int j = 0; j < k; j++)
                B[i][j] = rand() % 10;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++)
                printf("%d ", A[i][j]);
            printf("\n");
        }
        printf("\n");
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < k; j++)
                printf("%d ", B[i][j]);
            printf("\n");
        }
        printf("\n");
        fflush(stdout);
    }
    MPI_Scatter(A, 1, RESIZED_COL_TYPE, my_col, n, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Scatter(B, k, MPI_INT, my_row, k, MPI_INT, 0, MPI_COMM_WORLD);
    int my_prod[n][k], prod[n][k];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < k; j++) {
            my_prod[i][j] = my_col[i] * my_row[j];
        }
    }
    MPI_Reduce(my_prod, prod, n * k, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    if (rank == 0) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < k; j++) {
                printf("%d ", prod[i][j]);
            }
            printf("\n\n");
        }
        fflush(stdout);
    }



    MPI_Type_free(&COL_TYPE);
    MPI_Type_free(&RESIZED_COL_TYPE);
    MPI_Finalize();
}
