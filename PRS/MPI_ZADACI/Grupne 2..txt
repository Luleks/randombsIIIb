#include <stdio.h>
#include "mpi.h"
#include <stdlib.h>

int main(int argc, char* argv[]) {
	MPI_Init(&argc, &argv);
	int rank, size;
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	int N = -1;
	int* a, * b;
	int* partial_a, * partial_b;
	if (rank == 0) {
		while (N % size != 0) {
			printf("N (divisible by %d): ", size);
			fflush(stdout);
			scanf("%d", &N);
		}
	}
	MPI_Bcast(&N, 1, MPI_INT, 0, MPI_COMM_WORLD);
	a = (int*)malloc(N * sizeof(int));
	b = (int*)malloc(N * sizeof(int));
	if (rank == 0){
		for (int i = 0; i < N; i++) {
			printf("a[%d]: ", i);
			fflush(stdout);
			scanf("%d", &a[i]);
		}
		for (int i = 0; i < N; i++) {
			printf("b[%d]: ", i);
			fflush(stdout);
			scanf("%d", &b[i]);
		}
	}
	MPI_Bcast(&N, 1, MPI_INT, 0, MPI_COMM_WORLD);
	partial_a = (int*)malloc(N / size * sizeof(int));
	partial_b = (int*)malloc(N / size * sizeof(int));
	MPI_Scatter(a, N / size, MPI_INT, partial_a, N / size, MPI_INT, 0, MPI_COMM_WORLD);
	MPI_Scatter(b, N / size, MPI_INT, partial_b, N / size, MPI_INT, 0, MPI_COMM_WORLD);
	int s = 0;
	int total_s;
	for (int i = 0; i < N / size; i++) {
		s += partial_a[i] * partial_b[i];
	}
	MPI_Reduce(&s, &total_s, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

	if (rank == 0) {
		printf("Dot product: %d\n", total_s);
		free(a);
		free(b);
	}
	free(partial_a);
	free(partial_b);
	MPI_Finalize();
}