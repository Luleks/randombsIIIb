#include <stdio.h>
#include "mpi.h"
#include <stdlib.h>

int main(int argc, char* argv[]) {
	MPI_Init(&argc, &argv);
	int rank, size;
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	int n = size;
	int* mat;
	int* b, * local_row;
	mat = (int*)malloc(n * n * sizeof(int));
	b = (int*)malloc(n * sizeof(int));
	local_row = (int*)malloc(n * sizeof(int));
	if (rank == 0) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				printf("mat[%d][%d]: ", i, j);
				fflush(stdout);
				scanf("%d", &mat[i * n + j]);
			}
		}
		for (int i = 0; i < n; i++) {
			printf("b[%d]: ", i);
			fflush(stdout);
			scanf("%d", &b[i]);
		}
	}

	MPI_Bcast(b, n, MPI_INT, 0, MPI_COMM_WORLD);
	MPI_Scatter(mat, n, MPI_INT, local_row, n, MPI_INT, 0, MPI_COMM_WORLD);
	int dot = 0;
	for (int i = 0; i < n; i++) {
		dot += local_row[i] * b[i];
	}
	MPI_Gather(&dot, 1, MPI_INT, local_row, 1, MPI_INT, 0, MPI_COMM_WORLD);
	if (rank == 0) {
		for (int i = 0; i < n; i++) {
			printf("%d ", local_row[i]);
			fflush(stdout);
		}
		printf("\n");
		fflush(stdout);
	}
	free(local_row);
	free(b);
	free(mat);
	MPI_Finalize();
}