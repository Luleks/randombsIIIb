#include <stdio.h>
#include "mpi.h"
#include <stdlib.h>
#include <limits.h>
#include <math.h>


int main(int argc, char* argv[]) {
	MPI_Init(&argc, &argv);
	int rank, size;
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Status status;
	int m, n;
	if (rank == 0) {
		printf("m: ");
		fflush(stdout);
		scanf("%d", &m);
	}
	n = size;
	MPI_Bcast(&m, 1, MPI_INT, 0, MPI_COMM_WORLD);
	int* mat = (int*)malloc(m * n * sizeof(int));
	int* b = (int*)malloc(n * sizeof(int));
	if (rank == 0) {
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				printf("mat[%d][%d]: ", i, j);
				fflush(stdout);
				scanf("%d", &mat[i * n + j]);
			}
		}
		for (int i = 0; i < n; i++) {
			printf("b[%d]: ", i);
			fflush(stdout);
			scanf("%d", &b[i]);
		}
	}
	int my_b, * my_column = (int*)malloc(m * sizeof(int));
	MPI_Scatter(b, 1, MPI_INT, &my_b, 1, MPI_INT, 0, MPI_COMM_WORLD);
	if (rank == 0) {
		for (int i = n - 1; i >= 0; i--) {
			for (int j = 0; j < m; j++) {
				my_column[j] = mat[j * n + i];
			}
			if (i != 0) {
				MPI_Send(my_column, m, MPI_INT, i, 88, MPI_COMM_WORLD);
			}
		}
	}
	if (rank != 0) {
		MPI_Recv(my_column, m, MPI_INT, 0, 88, MPI_COMM_WORLD, &status);
	}
	for (int i = 0; i < m; i++)
		my_column[i] *= my_b;
	int* suma = (int*)malloc(m * sizeof(int));
	MPI_Reduce(my_column, suma, m, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
	if (rank == 0) {
		for (int i = 0; i < m; i++) {
			printf("%d ", suma[i]);
			fflush(stdout);
		}
	}

	free(suma);
	free(mat);
	free(b);
	free(my_column);
	MPI_Finalize();
}