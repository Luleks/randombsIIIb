#include <stdio.h>
#include "mpi.h"
#include <stdlib.h>
#include <limits.h>
#include <math.h>

#define a 3
#define b 31
#define x 5

int main(int argc, char* argv[]) {
	MPI_Init(&argc, &argv);
	int rank, size;
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	int my_min = INT_MAX, my_count = 0;
	struct min_count {
		int count;
		int rank;
	} in, out;
	struct min_min {
		int min;
		int rank;
	} in1, out1;
	in1.min = INT_MAX;
	in.count = 0;
	in.rank = rank;
	in1.rank = rank;
	for (int i = a + rank * 2; i <= b; i+=pow(2, size - 1)) {
		if (i % x == 0) {
			in.count += 1;
			if (i < in1.min)
				in1.min = i;
		}
	}
	MPI_Reduce(&in, &out, 1, MPI_2INT, MPI_MINLOC, 0, MPI_COMM_WORLD);
	MPI_Bcast(&out, 1, MPI_2INT, 0, MPI_COMM_WORLD);
	MPI_Reduce(&in1, &out1, 1, MPI_2INT, MPI_MINLOC, out.rank, MPI_COMM_WORLD);
	MPI_Bcast(&out1, 1, MPI_2INT, out.rank, MPI_COMM_WORLD);
	if (out1.rank == rank) {
		printf("Process %d has min divisible by %d and it is equal %d\n", rank, x, out1.min);
		fflush(stdout);
	}

	MPI_Finalize();
}